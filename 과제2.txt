
// ConsoleApplication2.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//
#include "stdafx.h"
#include<glut.h>
#include<stdlib.h>
#include<time.h>
#include<math.h>
static int delay = 10, z = 200;
static GLfloat theta[3] = { 0.0,0.0,0.0 }, scale = 1.0;
static int axis = 1, count = 0;
GLfloat vertices[][3] = { { -1,-1,-1 },{ 1,-1,-1 },{ 1,1,-1 },{ -1,1,-1 },
{ -1,-1,1 },{ 1,-1,1 },{ 1,1,1 } ,{ -1,1,1 } };
GLfloat color[][3] = { { 0,0,0 },{ 1,0,0 },{ 1,1,0 },{ 0,1,0 },{ 0,0,1 },
{ 1,0,1 },{ 1,1,1 },{ 0.1,1 } };
GLfloat eye[3] = { 0,0,1 }, at[3] = { 0,0,0 }, up[3] = { 0,1,0 };


void init() { // openGL 초기화
			  //srand(time(0));
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity(); // 정방행렬 = 단위행렬
	glClearColor(1.0, 1.0, 1.0, 1.0); // (r g b a(투명도)(1이 불투명)순서)(1이 최대값 가장 강한 색)
	glColor3f(0.0, 0.0, 1.0); // 붓의 색 선택(1 0 0 --> 빨간색)
	glOrtho(-200,200,-200,200,-200,200); // 좌표계 크기 설정 (left,right,bottom,top)
									//화면에보이는 좌표 범위 
	//glFrustum(-150, 150, -150, 150, -500, 500);
	//gluPerspective(85.0, 1.0, 2.0, 20.0);
	glEnable(GL_DEPTH_TEST);   // 테스트한 결과는 DEPTH_BUFFER에 저장된다.
							   //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	glMatrixMode(GL_MODELVIEW);
}

void polygon(int a, int b, int c, int d) {
	glBegin(GL_POLYGON);
	glColor3fv(color[a]);
	glVertex3fv(vertices[a]);
	glColor3fv(color[b]);
	glVertex3fv(vertices[b]);
	glColor3fv(color[c]);
	glVertex3fv(vertices[c]);
	glColor3fv(color[d]);
	glVertex3fv(vertices[d]);
	glEnd();
}
void display() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glLoadIdentity();		// 이게 없으면 2도 회전된 행렬에 또 4도 회전 6도 회전..
							//gluLookAt(eye[0], eye[1], eye[2], at[0], at[1], at[2], up[0], up[1], up[2]);
							//glRotatef(theta[0], 1.0, 0, 0); //theta만큼 y축 기준으로 회전
							//glRotatef(theta[1], 0, 1.0, 0);
							//glRotatef(theta[2], 0, 0, 1);
	gluLookAt(eye[0], eye[1], eye[2], at[0], at[1], at[2], up[0], up[1], up[2]);
	glViewport(150, 150, 200, 200);
	glutWireTeapot(100);

	glFlush();
}

void timer(int t) {

	glutPostRedisplay();
	glutTimerFunc(delay, timer, t);
}

void keyboard_handler(unsigned char key, int x, int y) {
	if (key == 'a') {       //왼쪽이동 -> 물체 오른쪽
		eye[0]--;
		at[0]--;
	}
	if (key == 'd') {      // 오른쪽이동-> 물체 왼쪽
		eye[0]++;
		at[0]++;
	}
	if (key == 'w') {        // 앞으로->물체크게
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		z--;
		glOrtho(-z, z, -z, z, -z, z);
		glMatrixMode(GL_MODELVIEW);
	}
	if (key == 's') {       //뒤로감 ->물체 작게보임
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		z++;
		glOrtho(-z, z, -z, z, -z, z);
		glMatrixMode(GL_MODELVIEW);
	}

	glutPostRedisplay();
}


void mouse_handler(int btn, int state, int x, int y) { // x,y 마우스포인터 위치좌표
	if (btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
		axis = 0;
	if (btn == GLUT_MIDDLE_BUTTON && state == GLUT_DOWN)
		axis = 1;
	if (btn == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
		axis = 2;
}

int main(int argc, char *argv[])
{
	glutInit(&argc, (char**)argv); // 초기화
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500); // 윈도우크기초기화(도화지크기)(실행하면 나오는 화면)
	glutCreateWindow("Prog03 : Bouncing Pixel"); // 윈도우생성 
												 //glutIdleFunc(spin_cube);
	glutKeyboardFunc(keyboard_handler);
	glutMouseFunc(mouse_handler);
	glutDisplayFunc(display);  // os가 언제 화면을 보여줄지(parameter를 그릴것)
	//glutTimerFunc(delay, timer, 0);

	init(); // openGL 초기화
	glutMainLoop(); // event queue에 어떤 event가 들어있는지 검사하는 loop시작

	return 0;
}
