// ConsoleApplication2.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//
#include "stdafx.h"
#include<glut.h>
#include<stdlib.h>
#include<time.h>
#include<math.h>
static int delay = 1;
static double angle = 0, inc = 1;
static double w = 1.0, winc = 0.01;
#define PI 3.1415926535897
void init();
void display();
void timer(int);

GLfloat v[8][3] = { { 15,15,35 },{ 35,15,35 }, { 35,35,35 }, { 15,35,35 }, { 40,20,15 },{20,20,15 },  { 40,40,15 },  { 20,40,15 } };
GLfloat vv[8][3];
int main(int argc, char *argv[])
{
	glutInit(&argc, (char**)argv); // 초기화
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(500, 500); // 윈도우크기초기화(도화지크기)(실행하면 나오는 화면)
	glutCreateWindow("Prog03 : Bouncing Pixel"); // 윈도우생성 
	glutDisplayFunc(display);  // os가 언제 화면을 보여줄지(parameter를 그릴것)
	glutTimerFunc(delay, timer, 0);

	init(); // openGL 초기화
	glutMainLoop(); // event queue에 어떤 event가 들어있는지 검사하는 loop시작
	return 0;
}

void init() { // openGL 초기화
	srand(time(0));

	//printf("%f %f %f %f\n", x, y, xinc, yinc);
	glClearColor(1.0, 1.0, 1.0, 1.0); // (r g b a(투명도)(1이 불투명)순서)(1이 최대값 가장 강한 색)
									  //glColor3f(1.0, 0.0, 0.0); // 붓의 색 선택(1 0 0 --> 빨간색)
	glOrtho(-30, 30.0, -30.0, 30.0, -30.0, 30.0); // 좌표계 크기 설정 (left,right,bottom,top)
												//화면에보이는 좌표 범위 
	for (int q = 0; q < 8; q++) {
		v[q][0] -= 25;
		v[q][1] -= 25;
		v[q][2] -= 25;
	}
	glEnable(GL_DEPTH_TEST);   // 테스트한 결과는 DEPTH_BUFFER에 저장된다.
}

void display() {
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	float radian = angle * PI / 180.0;

	if (w >= 1.0 || w <= 0.1)
		winc *= -1;
	w += winc;
	for (int q = 0; q < 8; q++) {
		vv[q][0] = v[q][0] * w;
		vv[q][1] = v[q][1] * w;
		vv[q][2] = v[q][2] * w;
	}
	for (int q = 0; q < 8; q++) {
		vv[q][0] = vv[q][0] * cos(radian) + vv[q][2] * sin(radian);
		vv[q][2] = vv[q][2] * cos(radian) - vv[q][0] * sin(radian);
		vv[q][1] = vv[q][1];
	}

	glColor3f(1.0, 0.0, 0.0);
	glBegin(GL_POLYGON);
	glVertex3fv(vv[0]); glVertex3fv(vv[1]); glVertex3fv(vv[2]); glVertex3fv(vv[3]);
	glEnd();

	glColor3f(0.0, 1.0, 0.0);
	glBegin(GL_POLYGON);
	glVertex3fv(vv[0]); glVertex3fv(vv[1]); glVertex3fv(vv[4]); glVertex3fv(vv[5]);
	glEnd();

	glColor3f(0.0, 0.0, 1.0);
	glBegin(GL_POLYGON);
	glVertex3fv(vv[5]); glVertex3fv(vv[4]); glVertex3fv(vv[6]); glVertex3fv(vv[7]);
	glEnd();

	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_POLYGON);
	glVertex3fv(vv[7]); glVertex3fv(vv[6]); glVertex3fv(vv[2]); glVertex3fv(vv[3]);
	glEnd();

	glColor3f(0.0, 1.0, 1.0);
	glBegin(GL_POLYGON);
	glVertex3fv(vv[0]); glVertex3fv(vv[5]); glVertex3fv(vv[7]); glVertex3fv(vv[3]);
	glEnd();

	glColor3f(1.0, 0.0, 1.0);
	glBegin(GL_POLYGON);
	glVertex3fv(vv[1]); glVertex3fv(vv[4]); glVertex3fv(vv[6]); glVertex3fv(vv[2]);
	glEnd();

	angle += inc;
	glFlush();
}
void timer(int t) {
	glutPostRedisplay();
	glutTimerFunc(delay, timer, t);
}

